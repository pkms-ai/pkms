version: '3.8'

services:
  # Commented out services
  # reverse-proxy:
  #   build: ./reverse-proxy
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./reverse-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - api-gateway
  #   networks:
  #     - pkms-network

  # api-gateway:
  #   build: ./services/api-gateway
  #   depends_on:
  #     - auth-service
  #   networks:
  #     - pkms-network

  # auth-service:
  #   build: ./services/auth-service
  #   environment:
  #     - KEYCLOAK_USER=admin
  #     - KEYCLOAK_PASSWORD=admin
  #   ports:
  #     - "8081:8080"
  #   networks:
  #     - pkms-network

  reverse-proxy:
    build: ./services/reverse-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./services/reverse-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-gateway
      - auth-service
    networks:
      - pkms-network

  api-gateway:
    build: ./services/api-gateway
    depends_on:
      - content-submission-service
      - auth-service
    networks:
      - pkms-network
    volumes:
      - ./keycloak_public_key.pem:/tmp/keycloak_public_key.pem
    environment:
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
      - KONG_DATABASE=off
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    build: ./services/auth-service
    environment:
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - KC_DB_USERNAME=${POSTGRES_USER}
      - KC_DB_PASSWORD=${POSTGRES_PASSWORD}
      - KC_HOSTNAME=localhost
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    command: 
      - "start-dev"
      - "--http-relative-path=/auth"
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - pkms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/auth/"]
      interval: 30s
      timeout: 10s
      retries: 5

  content-submission-service:
    build: 
      context: ./services/content-submission-service
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - message-queue
    networks:
      - pkms-network

  # web-article-processor:
  #   build: ./services/content-processing-service/web-article-processor
  #   depends_on:
  #     - message-queue
  #     - postgres
  #     - qdrant
  #   networks:
  #     - pkms-network

  # youtube-video-processor:
  #   build: ./services/content-processing-service/youtube-video-processor
  #   depends_on:
  #     - message-queue
  #     - postgres
  #     - qdrant
  #   networks:
  #     - pkms-network

  # notification-service:
  #   build: ./services/notification-service
  #   depends_on:
  #     - message-queue
  #     - auth-service
  #   networks:
  #     - pkms-network

  # search-service:
  #   build: ./services/search-service
  #   depends_on:
  #     - postgres
  #     - qdrant
  #     - neo4j
  #   networks:
  #     - pkms-network

  # content-visualization-service:
  #   build: ./services/content-visualization-service
  #   depends_on:
  #     - postgres
  #   networks:
  #     - pkms-network

  # web-application:
  #   build: ./services/web-application
  #   ports:
  #     - "3000:80"
  #   depends_on:
  #     - api-gateway
  #   networks:
  #     - pkms-network

  # Database services
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - pkms-network

  qdrant:
    image: qdrant/qdrant:v1.1.1
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "${QDRANT_REST_PORT}:6333"
      - "${QDRANT_GRPC_PORT}:6334"
    networks:
      - pkms-network

  neo4j:
    image: neo4j:4.4
    ports:
      - "${NEO4J_HTTP_PORT}:7474"   # HTTP
      - "${NEO4J_BOLT_PORT}:7687"   # Bolt
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
    volumes:
      - neo4j_data:/data
    networks:
      - pkms-network

  message-queue:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - pkms-network

networks:
  pkms-network:
    name: pkms-network

volumes:
  postgres_data:
  qdrant_data:
  neo4j_data:
