services:
  # reverse-proxy:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./infrastructure/reverse-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - api-gateway
  #   networks:
  #     - pkms-network

  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - 8080:8080
    networks:
      - pkms-network
  api-gateway:
    image: kong:latest
    restart: unless-stopped
    depends_on:
      - content-submission-service
      - content-processing-service
      - crawler-service
      - summarizer-service
      - embedding-service
    networks:
      - pkms-network
    environment:
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
      - KONG_DATABASE=off
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./infrastructure/api-gateway/kong.yml:/usr/local/kong/declarative/kong.yml:ro

  # auth-service:
  #   image: quay.io/keycloak/keycloak:26.0.0
  #   container_name: auth-service
  #   environment:
  #     - KC_BOOTSTRAP_ADMIN_USERNAME=${KEYCLOAK_ADMIN}
  #     - KC_BOOTSTRAP_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
  #     - KC_DB=postgres
  #     - KC_DB_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
  #     - KC_DB_USERNAME=${POSTGRES_USER}
  #     - KC_DB_PASSWORD=${POSTGRES_PASSWORD}
  #     - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
  #     - KC_HOSTNAME=http://localhost/auth
  #     - ENVIRONMENT=${ENVIRONMENT:-development}
  #   # ports:
  #   #   - "8080:8080"
  #   command:
  #     - start-dev
  #   depends_on:
  #     - postgres
  #   networks:
  #     - pkms-network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/auth/"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  content-submission-service:
    build: ./services/content-submission-service
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - message-queue
    networks:
      - pkms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  content-processing-service:
    build: ./services/content-processing-service
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - message-queue
    networks:
      - pkms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  crawler-service:
    build: ./services/crawler-service
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - message-queue
    networks:
      - pkms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  summarizer-service:
    build: ./services/summarizer-service
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - message-queue
    networks:
      - pkms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  embedding-service:
    build: ./services/embedding-service
    env_file:
      - .env
    depends_on:
      - message-queue
      - pgvector
    networks:
      - pkms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  db-service:
    build: ./services/db-service
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - postgres
    networks:
      - pkms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  message-queue:
    image: rabbitmq:3-management
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - pkms-network

  # Database services
  postgres:
    image: postgres:13
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - pkms-network

  pgvector:
    image: pgvector/pgvector:pg16
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${VECTOR_DB_USER}
      - POSTGRES_PASSWORD=${VECTOR_DB_PASSWORD}
      - POSTGRES_DB=${VECTOR_DB_NAME}
    ports:
      - "${VECTOR_DB_PORT}:5432"
    restart: unless-stopped
    volumes:
      - vector_db_data:/var/lib/postgresql/data
    networks:
      - pkms-network

  # qdrant:
  #   image: qdrant/qdrant:v1.1.1
  #   volumes:
  #     - qdrant_data:/qdrant/storage
  #   ports:
  #     - "${QDRANT_REST_PORT}:6333"
  #     - "${QDRANT_GRPC_PORT}:6334"
  #   networks:
  #     - pkms-network

  # neo4j:
  #   image: neo4j:4.4
  #   ports:
  #     - "${NEO4J_HTTP_PORT}:7474"   # HTTP
  #     - "${NEO4J_BOLT_PORT}:7687"   # Bolt
  #   environment:
  #     - NEO4J_AUTH=${NEO4J_AUTH}
  #   volumes:
  #     - neo4j_data:/data
  #   networks:
  #     - pkms-network

  # test-service:
  #   image: curlimages/curl
  #   networks:
  #     - pkms-network
  #   command: sleep infinity

networks:
  pkms-network:
    name: pkms-network

volumes:
  rabbitmq_data:
  postgres_data:
  vector_db_data:
  # qdrant_data:
  # neo4j_data:
